import json
import asyncio
import aiomysql
from sentence_transformers import SentenceTransformer
from config import DB_HOST, DB_NAME, DB_PASSWORD, DB_USER

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
model = SentenceTransformer("all-MiniLM-L6-v2")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
DB_CONFIG = {
    "host": DB_HOST,
    "user": DB_USER,
    "password": DB_PASSWORD,
    "db": DB_NAME,
}

async def update_vectors(pool, table_name, id_column, name_column, text_column, vector_column, exclude_names=None):
    """ –ö–æ–¥–∏—Ä—É–µ—Ç –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (name + text) –∏–∑ –ë–î –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ """
    exclude_names = exclude_names or []
    async with pool.acquire() as conn:
        async with conn.cursor() as cursor:
            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –∏–º—ë–Ω
            query = f"SELECT {id_column}, {name_column}, {text_column} FROM {table_name} WHERE {text_column} IS NOT NULL"
            if exclude_names:
                placeholders = ', '.join(['%s'] * len(exclude_names))
                query += f" AND {name_column} NOT IN ({placeholders})"

            await cursor.execute(query, exclude_names)
            rows = await cursor.fetchall()

            for row_id, name, text in rows:
                full_text = f"{name}. {text}" if name else text  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–º—è –∏ —Ç–µ–∫—Å—Ç
                vector = model.encode(full_text).tolist()  # –ö–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –≤–µ–∫—Ç–æ—Ä
                vector_json = json.dumps(vector)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON

                await cursor.execute(
                    f"UPDATE {table_name} SET {vector_column} = %s WHERE {id_column} = %s",
                    (vector_json, row_id)
                )
                print(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω {table_name}: ID {row_id}")

            await conn.commit()

async def main():
    print("‚ö° –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤...")

    pool = await aiomysql.create_pool(**DB_CONFIG)

    # –ò—Å–∫–ª—é—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Ç–µ–º—ã
    exclude_themes = ["–ü–æ–ª–µ–∑–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤", "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏"]

    await update_vectors(pool, "themes", "theme_id", "theme_name", "theme_text", "theme_vector", exclude_names=exclude_themes)
    await update_vectors(pool, "subthemes", "subtheme_id", "subtheme_name", "subtheme_text", "subtheme_vector")

    pool.close()
    await pool.wait_closed()

    print("üéâ –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
