import json
import asyncio
import aiomysql
from sentence_transformers import SentenceTransformer
from config import DB_HOST, DB_NAME, DB_PASSWORD, DB_USER

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
model = SentenceTransformer("all-MiniLM-L6-v2")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
DB_CONFIG = {
    "host": DB_HOST,
    "user": DB_USER,
    "password": DB_PASSWORD,
    "db": DB_NAME,
}

async def update_vectors(pool, table_name, id_column, text_column, vector_column):
    """ –ö–æ–¥–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –ë–î –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ """
    async with pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(f"SELECT {id_column}, {text_column} FROM {table_name} WHERE {text_column} IS NOT NULL")
            rows = await cursor.fetchall()

            for row_id, text in rows:
                vector = model.encode(text).tolist()  # –ö–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –≤–µ–∫—Ç–æ—Ä
                vector_json = json.dumps(vector)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON

                await cursor.execute(f"UPDATE {table_name} SET {vector_column} = %s WHERE {id_column} = %s", (vector_json, row_id))
                print(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω {table_name}: ID {row_id}")

            await conn.commit()

async def main():
    print("‚ö° –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤...")

    pool = await aiomysql.create_pool(**DB_CONFIG)

    await update_vectors(pool, "themes", "theme_id", "theme_text", "theme_vector")
    await update_vectors(pool, "subthemes", "subtheme_id", "subtheme_text", "subtheme_vector")

    pool.close()
    await pool.wait_closed()

    print("üéâ –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())