import json
from scipy.spatial.distance import cosine
from sentence_transformers import SentenceTransformer
from aiogram import Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from database import Database
from keyboards import back_buttons
from states import MenuState
from utils import delete_old_mes

search_router = Router()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
model = SentenceTransformer("all-MiniLM-L6-v2")

@search_router.message()
async def search_info(message: Message, state: FSMContext, bot: Bot, db: Database):
    await delete_old_mes(bot, message.chat.id, message.message_id)
    await state.set_state(MenuState.search_query)

    data = await state.get_data()

    search_text = data.get("search_text")

    if not search_text:
        search_text = message.text.strip()

    if len(search_text) < 5:
        await message.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ", reply_markup=back_buttons())
        return

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –≤–µ–∫—Ç–æ—Ä
        query_vector = model.encode(search_text).tolist()

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–º—ã —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º–∏
        query_themes = "SELECT theme_id, theme_name, theme_vector FROM themes WHERE theme_vector IS NOT NULL"
        query_subthemes = "SELECT subtheme_id, subtheme_name, subtheme_vector FROM subthemes WHERE subtheme_vector IS NOT NULL"


        themes = await db.fetch_all(query_themes)
        subthemes = await db.fetch_all(query_subthemes)

        if not themes and not subthemes:
            await message.answer("–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª", reply_markup=back_buttons())
            return

            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –∫–∞–∂–¥–æ–π —Ç–µ–º–æ–π
        similarities = []

        for theme in themes:
            theme_vector = json.loads(theme["theme_vector"])  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –≤ –º–∞—Å—Å–∏–≤
            similarity = 1 - cosine(query_vector, theme_vector)  # –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ

            if similarity > 0.5:
                similarities.append((theme["theme_name"], similarity, f'select_theme_{theme["theme_id"]}'))  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫

        for subtheme in subthemes:
            subtheme_vector = json.loads(subtheme["subtheme_vector"])  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –≤ –º–∞—Å—Å–∏–≤
            similarity = 1 - cosine(query_vector, subtheme_vector)  # –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ

            if similarity > 0.5:
                similarities.append((subtheme["subtheme_name"], similarity, f'select_subtheme_{subtheme["subtheme_id"]}'))  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫

        if len(similarities) == 0:
            await message.answer("–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª", reply_markup=back_buttons())
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–º—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ö–æ–∂–µ—Å—Ç–∏
        best_matches = sorted(similarities, key=lambda x: x[1], reverse=True)

        buttons = []

        for name, sim, call in best_matches:
            buttons.append([InlineKeyboardButton(text=name, callback_data=call)])

        buttons.append([InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")])

        await message.answer("üîé –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

        await state.set_state(MenuState.search_query)
        await state.update_data(search_text=search_text)

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=back_buttons())
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

@search_router.callback_query(lambda call: call.data == "search_results")
async def return_to_search(call: CallbackQuery, state: FSMContext, bot: Bot, db: Database):
    await call.message.delete()

    data = await state.get_data()
    search_text = data.get("search_text")

    if not search_text:
        await call.message.answer("–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫ –ø–æ–∑–∂–µ", reply_markup=back_buttons())
        return
    
    await search_info(call.message, state, bot, db)