import json
import numpy as np
from scipy.spatial.distance import cosine
from sentence_transformers import SentenceTransformer
from aiogram import Router, Bot
from aiogram.types import Message
from database import Database
from keyboards import back_buttons

search_router = Router()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
model = SentenceTransformer("all-MiniLM-L6-v2")

@search_router.message()
async def search_info(message: Message, bot: Bot, db: Database):
    search_text = message.text.strip()

    if len(search_text) < 5:
        await message.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ", reply_markup=back_buttons())
        return

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –≤–µ–∫—Ç–æ—Ä
        query_vector = model.encode(search_text).tolist()

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–º—ã —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º–∏
        query = "SELECT theme_id, theme_name, theme_vector FROM themes WHERE theme_vector IS NOT NULL"
        themes = await db.fetch_all(query)

        if not themes:
            await message.answer("–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª", reply_markup=back_buttons())
            return

         # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –∫–∞–∂–¥–æ–π —Ç–µ–º–æ–π
        similarities = []
        for theme in themes:
            theme_vector = json.loads(theme["theme_vector"])  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –≤ –º–∞—Å—Å–∏–≤
            similarity = 1 - cosine(query_vector, theme_vector)  # –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ

            similarities.append((theme["theme_name"], similarity))  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–º—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ö–æ–∂–µ—Å—Ç–∏
        similarities.sort(key=lambda x: x[1], reverse=True)

        # –ë–µ—Ä–µ–º —Ç–æ–ø-3 —Å–∞–º—ã—Ö –ø–æ—Ö–æ–∂–∏—Ö —Ç–µ–º—ã
        top_n = 3
        best_matches = similarities[:top_n]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        response = "üîé –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:\n\n"
        for name, sim in best_matches:
            response += f"‚úÖ <b>{name}</b> ({sim:.2%} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)\n"

        await message.answer(response, parse_mode="HTML")

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=back_buttons())
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")